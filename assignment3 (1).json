{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "bf6678712a0d2dc3cd6dc4c202f038f4",
     "grade": false,
     "grade_id": "cell-7885ab5957ec1d3a",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "version = \"v1.11.012921\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "7902f22ab018e6b89bba741482ad4fc3",
     "grade": false,
     "grade_id": "cell-64b4374420d1d161",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "# SIADS 543 Assignment 3: Text representations, topic modeling and word embeddings\n",
    "\n",
    "In this week's assignment you'll gain experience applying topic modeling and other latent variable estimation methods. We'll focus on textual data, continuing to work with vectorizers and related text representations like embeddings.\n",
    "\n",
    "All questions in this assignment are auto-graded. Some parts ask you a short question or two about on the results: these are meant to encourage you to reflect on the outcomes, but do not need to be included as part of your graded submission."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "676827155d28e6ed3647ffb45c7162eb",
     "grade": false,
     "grade_id": "cell-e8d8014231a6151c",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# First import some necessary libararies \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "# Suppress all warnings\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "np.set_printoptions(precision = 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "3fd1fedd0b2506667c9ccaf3417fe37a",
     "grade": false,
     "grade_id": "cell-8bf7ebbd04db03d7",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "#### Here are some useful utility functions to use with this assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "70ae8f0e2d45cc11655571e2bfee5ca8",
     "grade": false,
     "grade_id": "cell-172dd4cf129d7dcd",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n",
    "\n",
    "# display_topics:  example showing how to take the model components generated by LDA or NMF\n",
    "# and use them to dump the top words by weight for each topic.\n",
    "def display_topics(model, feature_names, num_top_words):\n",
    "    for topic_idx, topic in enumerate(model.components_):\n",
    "        print(\"Topic %d:\" % (topic_idx))\n",
    "        print(\" \".join([feature_names[i]\n",
    "                        for i in topic.argsort()[:-num_top_words - 1:-1]]))\n",
    "\n",
    "# load_newsgroup_documents: prepare training and test data from the 20newsgroups dataset\n",
    "def load_newsgroup_documents():\n",
    "    # The Coursera environment must be self-contained and so APIs that do external fetching\n",
    "    # aren't allowed. So we use pickle files that can be stored locally instead of the following\n",
    "    # API calls.\n",
    "    # dataset_train   = fetch_20newsgroups(subset = 'train', shuffle=True, random_state=42, remove=('headers', 'footers', 'quotes'))\n",
    "    # dataset_test    = fetch_20newsgroups(subset = 'test', shuffle=True, random_state=42, remove=('headers', 'footers', 'quotes'))\n",
    "    \n",
    "    pickle_train_data = open(\"./assets/20newsgroups_train_data.pickle\", \"rb\")\n",
    "    pickle_train_labels  = open(\"./assets/20newsgroups_train_labels.pickle\", \"rb\")\n",
    "    documents_train = pickle.load(pickle_train_data)\n",
    "    labels_train    = pickle.load(pickle_train_labels)\n",
    "    pickle_train_data.close()\n",
    "    pickle_train_labels.close()\n",
    "   \n",
    "    return documents_train, labels_train\n",
    "\n",
    "# load the dataset for future use....\n",
    "documents_train, labels_train = load_newsgroup_documents()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e4d79eeb2c5bef0e04855f12c92664ac",
     "grade": false,
     "grade_id": "cell-8ceaa45190716940",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 1 (20 points)  The choice of text processing can impact final classification performance.\n",
    "\n",
    "There are many different parameter settings for Vectorizer objects in scikit-learn. Small changes in these settings can result in very different text representations and significant changes in final classifier accuracy. For this question you'll train a commonly-used type of text classifier, Multinomial Naive Bayes, using three different input representations for text, to see the effect of different parameter choices on classifier training set accuracy.\n",
    "\n",
    "Follow these steps:\n",
    "1. Create a TfidfVectorizer object (let's call it A) with the following settings:\n",
    "\n",
    "    `max_features = 10000, # only top 10k by freq`\n",
    "    \n",
    "    `lowercase = False, # keep capitalization`\n",
    "    \n",
    "    `ngram_range = (1,2), # include 2-word phrases`\n",
    "    \n",
    "    `min_df=10,  # note: absolute count of documents`\n",
    "    \n",
    "    `max_df=0.95,   # note: % of docs in collection`\n",
    "    \n",
    "    `stop_words='english'`\n",
    "    \n",
    "    \n",
    "2. Create a CountVectorizer object (let's call it B) with the same settings:\n",
    "\n",
    "    `max_features = 10000, # only top 10k by freq`\n",
    "    \n",
    "    `lowercase = False, # keep capitalization`\n",
    "    \n",
    "    `ngram_range = (1,2), # include 2-word phrases`\n",
    "    \n",
    "    `min_df=10,  # note: absolute count of doc`\n",
    "    \n",
    "    `max_df=0.95,   # note: % of docs`\n",
    "    \n",
    "    `stop_words='english'`\n",
    "    \n",
    "3. Create a TfidfVectorizer object (let's call it C) with the settings:\n",
    "\n",
    "    `max_features = 10000, # only top 10k by freq`\n",
    "    \n",
    "    `lowercase = False, `\n",
    "    \n",
    "    `ngram_range = (1,2), `\n",
    "    \n",
    "    `min_df=200,  # note: absolute count of docs`\n",
    "    \n",
    "    `max_df=0.95  # note: % of docs` \n",
    "    \n",
    "    \n",
    "4. Using the training data `documents_train`, along with the ground truth labels `labels_train`, train three Naive Bayes classifiers, corresponding to choices A, B, and C of vectorizer.\n",
    "\n",
    "5. Normally we'd compute the accuracy of these classifiers on a test set, but for this question we're interested more in the potential upper bound on performance that is achievable with text representation choices A, B, or C.  Thus you should compute, for each of the three classifiers, the accuracy on the *training set*.\n",
    "\n",
    "6. Your function should return these three accuracy scores as a tuple with three floats: (accuracy_A, accuracy_B, accuracy_C).\n",
    "\n",
    "It is instructive to examine the difference in accuracy across the three different representations. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = TfidfVectorizer(max_features = 10000,\n",
    "                                 lowercase= False,\n",
    "                                 ngram_range = (1,2),\n",
    "                                 min_df = 10,\n",
    "                                 max_df = 0.95,\n",
    "                                 stop_words = 'english')\n",
    "\n",
    "B = CountVectorizer(max_features = 10000,\n",
    "                                 lowercase= False,\n",
    "                                 ngram_range = (1,2),\n",
    "                                 min_df = 10,\n",
    "                                 max_df = 0.95,\n",
    "                                 stop_words = 'english')\n",
    "\n",
    "C = TfidfVectorizer(max_features = 10000,\n",
    "                                 lowercase= False,\n",
    "                                 ngram_range = (1,2),\n",
    "                                 min_df = 200,\n",
    "                                 max_df = 0.95)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "A_documents = A.fit_transform(documents_train)\n",
    "A_NB = MultinomialNB().fit(A_documents, labels_train)\n",
    "A_preds = A_NB.predict(A_documents)\n",
    "A_score = accuracy_score(labels_train, A_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8352046680222792\n"
     ]
    }
   ],
   "source": [
    "print(A_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "B_documents = B.fit_transform(documents_train)\n",
    "B_NB = MultinomialNB().fit(B_documents, labels_train)\n",
    "B_preds = B_NB.predict(B_documents)\n",
    "B_score = accuracy_score(labels_train, B_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7694279904517726"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "B_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "C_documents = C.fit_transform(documents_train)\n",
    "C_NB = MultinomialNB().fit(C_documents, labels_train)\n",
    "C_preds = C_NB.predict(C_documents)\n",
    "C_score = accuracy_score(labels_train, C_preds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5562726549376713"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "ee4553d7812a31613a7b58d386918ae3",
     "grade": false,
     "grade_id": "cell-ce0aaf11d3f59591",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def answer_text_processing():\n",
    "    \n",
    "    result = (0.8352046680222792,\n",
    "             0.7694279904517726,\n",
    "             0.5562726549376713)\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    #raise NotImplementedError()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "aa754301897faba78abe4de53797eb58",
     "grade": true,
     "grade_id": "cell-01b250516653cdd8",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "stu_ans = answer_text_processing()\n",
    "\n",
    "assert isinstance(stu_ans, tuple), \"Q1: Your function should return a tuple.\"\n",
    "assert len(stu_ans) == 3, \"Q1: Your tuple should contain three floats.\"\n",
    "\n",
    "for i, item in enumerate(stu_ans):\n",
    "    assert isinstance(item, (float, np.floating)), f\"Q1: Your answer at index {i} should be a float number. \"\n",
    "\n",
    "# Some hidden tests\n",
    "\n",
    "del stu_ans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "a55aa0ffb48e9a8a3fe9925e329136b3",
     "grade": false,
     "grade_id": "cell-3d0505dd6f24836c",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 2 (30 points). Latent Semantic Indexing and the vocabulary gap.\n",
    "\n",
    "One of the original motivations for Latent Semantic Indexing was overcoming the `vocabulary gap` in information retrieval.\n",
    "A query like `economic budget` should match strongly against text like `government spending on the economy` even though they don't have any exact keywords in common.\n",
    "\n",
    "In this question we'll create a demonstration of the power of Latent Semantic Indexing to do semantic matching. In the first part, you'll run LSI and use the reduced document matrix to do semantic matching of a query against other text that has no terms explicitly in common.\n",
    "\n",
    "In the second part, you'll see how this semantic matching is happening by computing the related terms that are included a query expanded using LSI's latent topics."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "986802d75d1510724ce027e7db2fe31a",
     "grade": false,
     "grade_id": "cell-0d79b1fd48df5fe5",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "### Part 2.1 (15 points) Use the reduced document matrix from LSI to do semantic matching of a query against a document.\n",
    "\n",
    "As a first step, run the code below that we've provided that creates a tf.idf vectorizer and applies it to the 20newsgroups training set. It also runs LSI (in reality a TruncatedSVD) with a latent space of 200 dimensions.\n",
    "\n",
    "Suppose we have a query \"economic budget\" that has the tf.idf vector $q$, with shape 1 x num_terms. We can obtain this vector simply by using vectorizer.transform on the text. Think of the matrix $U_k$ as the super operator that converts from original term space to latent semantic space. To expand text $q$ with related terms according to LSI, compute the expanded query $q_k$ using the formula \n",
    "\n",
    "$q_k = \\Sigma^{-1}_k U_k \\cdot q$. \n",
    "\n",
    "With this formula, you'll \"expand\" both the query and the document vectors to add related terms, and then compute the similarity match between them.\n",
    "\n",
    "Let's walk through this step. (1) The $\\Sigma^{-1}_k$ are just the singular values returned by LSI, but raised to the power -1. (2) $U_k \\cdot q$ is the dot product between the vector for $q$ and the term-document matrix $U_k$ returned by LSI. Then you just multiply components (1) and (2) to obtain the vector for the expanded text. Think of (1) as just a normalization that scales the LSI latent factor weights (the 'topics') appropriately.\n",
    "\n",
    "For this question, use cosine similarity to compute the similarity match between any two pieces of text, no matter what their vector representation.\n",
    "\n",
    "With the formula above, consider the query `\"economic budget\"` being matched against the (very) short document `\"government spending on the economy\"`.\n",
    "\n",
    "Your function should return a tuple of two floats: the cosine similarity score (from sklearn.metrics.pairwise) of (a) the original query and document vectors and (b) the LSI-expanded query and document vectors using the method above.\n",
    "\n",
    "Did LSI help overcome the vocabulary gap?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "c1b435491245d291a68e77b16e08e1e6",
     "grade": false,
     "grade_id": "cell-f7fad0f295241fbc",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "\n",
    "### Run this preamble code to run LSI. We've also given the line of code that gets the resulting U matrix. \n",
    "tfidf_vectorizer = TfidfVectorizer(ngram_range = (1,1), \n",
    "                                   min_df=2,  \n",
    "                                   max_df=0.95,  \n",
    "                                   stop_words='english',\n",
    "                                   max_features = 10000\n",
    "                                  ) # default English stopwords\n",
    "\n",
    "tfidf_documents = tfidf_vectorizer.fit_transform(documents_train)\n",
    "tfidf_feature_names = tfidf_vectorizer.get_feature_names()\n",
    "\n",
    "# LSI does truncated SVD on the document-term matrix of tf.idf term-weights.\n",
    "# The matrix we got back from the vectorizer is a \n",
    "# document-term matrix, i.e. one row per document.\n",
    "n_topics = 200\n",
    "lsi = TruncatedSVD(n_components=n_topics, random_state=0)\n",
    "\n",
    "# To match the examples and development of LSI in \n",
    "# our lectures, we're going to \n",
    "# take the transpose of the document-term matrix to give \n",
    "# TruncatedSVD the term-document matrix as input.\n",
    "\n",
    "# This is the matrix U_k:  num_term_features x num_topics\n",
    "reduced_term_matrix = lsi.fit_transform(np.transpose(tfidf_documents)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "singular_values = []\n",
    "for value in lsi.singular_values_:\n",
    "    singular_values.append(value**-1)\n",
    "singular_values = np.asarray(singular_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 10000)\n",
      "(1, 10000)\n"
     ]
    }
   ],
   "source": [
    "query = [\"economic budget\"]\n",
    "document = [\"government spending on the economy\"]\n",
    "\n",
    "query_vector = tfidf_vectorizer.transform(query)\n",
    "#print(\"Query Vector: \")\n",
    "print(query_vector.shape)\n",
    "document_vector = tfidf_vectorizer.transform(document)\n",
    "#print(\"Document Vector: \")\n",
    "print(document_vector.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "cosine_similarity(query_vector.toarray(), document_vector.toarray())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 200)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reduced_term_matrix.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.127,  0.034, -0.031, -0.064,  0.06 ,  0.038, -0.017, -0.   ,\n",
       "        -0.048, -0.003,  0.031, -0.003, -0.02 ,  0.05 , -0.045, -0.08 ,\n",
       "        -0.007,  0.037,  0.035,  0.009,  0.053, -0.021,  0.003,  0.027,\n",
       "         0.011,  0.044, -0.012,  0.01 , -0.024, -0.026,  0.018,  0.037,\n",
       "        -0.018, -0.023,  0.004, -0.03 , -0.032, -0.001, -0.052, -0.008,\n",
       "        -0.013,  0.01 , -0.023, -0.005, -0.01 ,  0.005, -0.041,  0.003,\n",
       "         0.002,  0.014, -0.019,  0.037,  0.003,  0.019,  0.042, -0.014,\n",
       "         0.014,  0.021, -0.01 ,  0.01 ,  0.003, -0.056,  0.019, -0.016,\n",
       "        -0.022,  0.017, -0.02 , -0.005, -0.015, -0.012, -0.031,  0.014,\n",
       "         0.01 ,  0.007,  0.021,  0.001, -0.   ,  0.005,  0.026, -0.007,\n",
       "         0.008, -0.024, -0.005,  0.006, -0.041,  0.01 ,  0.023, -0.02 ,\n",
       "        -0.003,  0.011,  0.004, -0.07 , -0.005, -0.007,  0.001, -0.019,\n",
       "         0.002, -0.007, -0.001,  0.01 ,  0.016,  0.018,  0.023,  0.013,\n",
       "        -0.004,  0.007, -0.018, -0.021,  0.006, -0.022, -0.002, -0.011,\n",
       "         0.001,  0.001, -0.019,  0.027,  0.005, -0.031,  0.001, -0.007,\n",
       "        -0.026, -0.009, -0.005, -0.022, -0.01 , -0.007,  0.01 , -0.031,\n",
       "         0.023, -0.018, -0.005,  0.042,  0.014, -0.038,  0.006,  0.007,\n",
       "         0.009,  0.018,  0.021, -0.014, -0.01 ,  0.015,  0.029,  0.015,\n",
       "        -0.016,  0.013,  0.032, -0.001,  0.004,  0.006, -0.007, -0.001,\n",
       "        -0.021,  0.006,  0.02 , -0.001,  0.005,  0.022, -0.013, -0.018,\n",
       "         0.017, -0.005,  0.016,  0.025, -0.011, -0.019,  0.007, -0.004,\n",
       "        -0.015, -0.001,  0.014, -0.014,  0.004,  0.016, -0.009, -0.021,\n",
       "         0.016, -0.004,  0.049, -0.004, -0.021, -0.022,  0.023, -0.014,\n",
       "        -0.006,  0.   , -0.   ,  0.004,  0.023, -0.001,  0.002, -0.003,\n",
       "        -0.004, -0.009, -0.013,  0.023,  0.037,  0.007, -0.005,  0.019]])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_dot = np.dot(query_vector.toarray().astype(float), reduced_term_matrix)\n",
    "query_dot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 200)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "document_dot = np.dot(document_vector.toarray(), reduced_term_matrix)\n",
    "document_dot.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.39216216000087667"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import spatial\n",
    "query_expanded = singular_values * query_dot\n",
    "#print(query_expanded)\n",
    "document_expanded = singular_values * document_dot\n",
    "#print(document_expanded)\n",
    "cos_a = 1-spatial.distance.cosine(query_expanded, document_expanded)\n",
    "#cos_a = cosine_similarity(query_expanded, document_expanded).astype(float)\n",
    "cos_a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "c912d21ec676527acf2a301740044bf2",
     "grade": false,
     "grade_id": "cell-03e5c2867559c41b",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def answer_semantic_similarity_a():\n",
    "    \n",
    "    result = (0.0, 0.39216216000087667)\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    #raise NotImplementedError()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "bc32e980962e30badba3b9ed64cb9a8f",
     "grade": true,
     "grade_id": "cell-5b880b5a4ac457e5",
     "locked": true,
     "points": 15,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "stu_ans = answer_semantic_similarity_a()\n",
    "\n",
    "assert isinstance(stu_ans, tuple), \"Q2a: Your function should return a tuple. \"\n",
    "assert len(stu_ans) == 2, \"Q2a: Your tuple should contain two floats.\"\n",
    "\n",
    "for i, item in enumerate(stu_ans):\n",
    "    assert isinstance(item, (float, np.floating)), f\"Q2a: Your answer at index {i} should be a float number. \"\n",
    "\n",
    "# Some hidden tests\n",
    "\n",
    "del stu_ans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "fb9927364c943ea8c419a6e627e8cff9",
     "grade": false,
     "grade_id": "cell-7dcb7722fb75a664",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "### Part 2.2 (15 points): We want to understand this semantic matching ability a bit more: what terms does LSI think are similar?\n",
    "\n",
    "To understand why the LSI-expanded vectors get the results they do, we're going to look at what the operator $U$ does to text. In particular, the term-term matrix $UU^T$ tells us the term expansion behavior of this LSI model. Think of the term-term matrix like an operator that first maps a term to the latent space L_k (using $U$), then back again from L_k to term space (using $U$ transpose). The $(i,j)$ entry of $UU^T$ is a kind of *association weight* between term $i$ and term $j$.\n",
    "\n",
    "Write a function to get the most related terms (according to LSI) for the word \"economy\". To do this:\n",
    "\n",
    "1. Compute the term-term matrix from the matrix U  (the reduced_term_matrix variable).\n",
    "2. Use the term-term matrix to get the association weights of all words related to the term \"economy\"\n",
    "3. Sort by descending weight value.\n",
    "4. Your function should return the top 5 words and their weights as a list of (string, float) tuples.\n",
    "\n",
    "Do the related terms match your subjective similarity judgment?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "term_term_matrix = np.dot(reduced_term_matrix, np.transpose(reduced_term_matrix))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\tgovernment (0.4147088178702173)\n",
      "\tpeople (0.2588145756802951)\n",
      "\tclinton (0.22583573791646439)\n",
      "\tmoney (0.20222045017000573)\n",
      "\tpresident (0.18232552387601816)\n"
     ]
    }
   ],
   "source": [
    "top = 5\n",
    "term_index = tfidf_vectorizer.vocabulary_['economy']\n",
    "top_related_term_indexes = term_term_matrix[term_index, :].argsort()[::-1]\n",
    "\n",
    "for i in range(0,top):\n",
    "    this_term = top_related_term_indexes[i]\n",
    "    print('\\t{} ({})'.format(tfidf_feature_names[this_term], term_term_matrix[term_index, this_term]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "4cddc3fa1f5a0e844609cca48b24bf6b",
     "grade": false,
     "grade_id": "cell-980257c3a923230b",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def answer_semantic_similarity_b():\n",
    "    \n",
    "    result = [('government', 0.4147088178702173),\n",
    "              ('people', 0.2588145756802951),\n",
    "              ('clinton', 0.22583573791646439),\n",
    "              ('money', 0.20222045017000573),\n",
    "              ('president', 0.18232552387601816)]\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    #raise NotImplementedError()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "b836dca6f68c6e035764e7f9fb5d00a4",
     "grade": true,
     "grade_id": "cell-683419d1db09c762",
     "locked": true,
     "points": 15,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "stu_ans = answer_semantic_similarity_b()\n",
    "\n",
    "assert isinstance(stu_ans, list), \"Q2b: Your function should return a list. \"\n",
    "assert len(stu_ans) == 5, \"Q2b: Your list should contain five elements (the term, score tuples).\"\n",
    "\n",
    "for i, item in enumerate(stu_ans):\n",
    "    assert isinstance(item, tuple), f\"Q2b: Your answer at index {i} should be a tuple. \"\n",
    "    assert isinstance(item[0], str), f\"Q2b: The first element of your tuple at index {i} should be a string. \"\n",
    "    assert isinstance(item[1], (float, np.floating)), f\"Q2b: The second element of your tuple at index {i} should be a float. \"\n",
    "\n",
    "# Some hidden tests\n",
    "\n",
    "del stu_ans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "9604c4da2f429a7a728298dd562c566b",
     "grade": false,
     "grade_id": "cell-e5ef4ed71becdbc8",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 3 (20 points) Semantic similarity: comparing your ranking with word2vec's ranking\n",
    "\n",
    "Before proceeding, set the provided variable `my_ranking` below to your own intuitive ranking of the words in the list as how similar they are to the word `party`. For example, if you think 'event' is the most similar word to 'party', it should be placed second in the list after 'party' and so on.\n",
    "\n",
    "You are to compute the system's ranking (let's call the variable system_ranking) of the semantic similarity of the words to `party`, according to word2vec. Then you'll compare your ranking to the system ranking using the Spearman R correlation: scipy.stats.spearmanr(.)\n",
    "\n",
    "Your function should return a tuple with three elements in this order.\n",
    "   1. The my_ranking tuple containing your subjective ranking of terms according to their semantic similarity with the target word.\n",
    "   2. A tuple (the value of the system_ranking variable) of the same set of terms in my_ranking, but ranked according to semantic similarity computed using the word embedding, from most to least similar.  The system ranking should use the word embedding object loaded at the beginning of this question (this is a W2VTransformer object containing a word2vec embedding).\n",
    "   3. A tuple containing the output of the `spearmanr` function between the my_ranking and system_ranking tuples. This will be a tuple containing two floats: the spearman r correlation, and a p-value.  See https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.spearmanr.html for details. **Use the term tuples, `my_ranking` and `system_ranking`, as inputs to the `spearmanr` function directly, instead of the ranking indices.**\n",
    "\n",
    "\n",
    "Do you notice any differences between your ranking and the system ranking? What might explain any differences you see?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# EDIT THE FOLLOWING variable my_ranking.\n",
    "#\n",
    "# The target word is **'party'**, which you should keep first in the tuple. Edit the order of the rest of the words\n",
    "# in my_ranking so that it reflects\n",
    "# YOUR subjective ranking for how semantically similar each word is to the word 'party'. For example,\n",
    "# if you think 'event' is the most similar word to 'party', it should be placed second in the list after 'party'\n",
    "# and so on. Make sure you use all the words : just re-order them.\n",
    "my_ranking = ('party', 'event', 'fun', 'vote', 'election',  'lead', 'champagne', 'budget', 'bicycle')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e20d09e0ffde12284c677b83c524fb8c",
     "grade": false,
     "grade_id": "cell-17f6968583f94f48",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "#### Before proceeding, you need to run the following code to load the pre-trained word2vec model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "e0464cbadb5703c78472da032d0a15c1",
     "grade": false,
     "grade_id": "cell-907764ada5cdd9f5",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "#### We need to load the pre-trained word2vec model. \n",
    "#### The result is an instance of the class W2VTransformer(size=100, min_count=1, seed=2)\n",
    "#### from gensim.sklearn_api import W2VTransformer\n",
    "\n",
    "import pickle\n",
    "\n",
    "f = open(\"./assets/text8_W2V.pickle\", \"rb\")\n",
    "text8_model = pickle.load(f)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "system_ranking = text8_model.transform(my_ranking)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0.204]]\n",
      "[[-0.011]]\n",
      "[[0.568]]\n",
      "[[0.653]]\n",
      "[[0.135]]\n",
      "[[0.045]]\n",
      "[[0.35]]\n",
      "[[0.001]]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "\n",
    "for i in range(1, len(system_ranking)):\n",
    "    print(cosine_similarity([system_ranking[0]], [system_ranking[i]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#4, 3, 7, 1, 5, 6, 8, 2\n",
    "\n",
    "system_order = ('party', 'election', 'vote', 'budget', 'event', 'lead', 'champagne', 'bicycle', 'fun')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.stats import spearmanr\n",
    "\n",
    "spearmanr_ranking = spearmanr(my_ranking, system_order)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SpearmanrResult(correlation=0.2833333333333333, pvalue=0.46003032896571994)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spearmanr_ranking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "f52b32bd279f987ebdf6664da70a3607",
     "grade": false,
     "grade_id": "cell-0c0ab801540e5261",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def answer_word2vec():\n",
    "    \n",
    "    result = (my_ranking, system_order, spearmanr_ranking)\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    #raise NotImplementedError()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "849cbf80d315edb970abfe90be439cdc",
     "grade": true,
     "grade_id": "cell-b53ed7c82b9dceeb",
     "locked": true,
     "points": 20,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "reference_terms = ('party', 'bicycle', 'vote', 'lead', 'election','champagne', 'event', 'fun', 'budget')\n",
    "\n",
    "stu_ans = answer_word2vec()\n",
    "\n",
    "assert isinstance(stu_ans, tuple), \"Q3: Your function should return a tuple. \"\n",
    "assert len(stu_ans) == 3, \"Q3: Your tuple should contain three elements: a tuple of strings (my_ranking), a tuple of strings (system_ranking), a tuple with spearman output (2 floats).\"\n",
    "\n",
    "# check my_rankings\n",
    "assert isinstance(stu_ans[0], tuple), \"Q3: Your first element must be a tuple (of strings). \"\n",
    "assert len(stu_ans[0]) == len(reference_terms), \"Q3: Your my_rankings tuple doesn't have the expected number of terms.\"\n",
    "assert stu_ans[0][0] == reference_terms[0], \"Q3: Your my_rankings tuple must have 'party' as the first term.\"\n",
    "assert set(stu_ans[0]) == set(reference_terms), \"Q3: Your my_rankings tuple is not a permutation of the permitted terms.\" # must be a permutation of the official term set\n",
    "\n",
    "# check system_rankings\n",
    "assert isinstance(stu_ans[1], tuple), \"Q3: Your second element must be a tuple (of strings). \"\n",
    "assert len(stu_ans[1]) == len(reference_terms), \"Q3: Your system_rankings tuple doesn't have the expected number of terms.\"\n",
    "assert stu_ans[0][0] == reference_terms[0], \"Q3: Your system_rankings tuple must have 'party' as the first term.\"\n",
    "assert set(stu_ans[1]) == set(reference_terms), \"Q3: Your system_rankings tuple is not a permutation of the permitted terms.\"  # must be a permutation of the official term set\n",
    "\n",
    "# check spearmanr\n",
    "assert isinstance(stu_ans[2], tuple), \"Q3: Your third element must be a tuple (of two floats). \"\n",
    "assert len(stu_ans[2]) == 2, \"Q3: Your spearman output tuple should contain two floats.\"\n",
    "assert isinstance(stu_ans[2][0], (float, np.floating)), \"Q3: Your spearman corr should be a float. \"\n",
    "assert isinstance(stu_ans[2][1], (float, np.floating)), \"Q3: Your spearman p-val should be a float. \"\n",
    "\n",
    "\n",
    "# Some hidden tests\n",
    "\n",
    "del stu_ans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "86e4cd96bee3a57161d3261bd93d40c5",
     "grade": false,
     "grade_id": "cell-710cb95aafc08d00",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "## Question 4: (30 points) Topic coherence.\n",
    "\n",
    "One measure of topic model quality that is used e.g. to determine the optimal number of topics for a corpus is *topic coherence*. This is a measure of how semantically related the top terms in a topic model are. Topic models with low coherence tend to be filled with seemingly random words and hard to interpret, while high coherence usually indicates a clear semantic theme that's easily understood.\n",
    "\n",
    "With their ability to represent word semantics, word embeddings are an ideal tool for computing topic coherence. In part 1, you'll implement a simple topic coherence function. In part 2, you'll apply that function to NMF topic modeling to find a setting for the number of topics that gives maximally coherent topic models.\n",
    "\n",
    "We're going to use the same `text8_model` W2VTransformer object, which implements the word2vec embedding, that you loaded for the previous question."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "824f1fd3ac9ea8cda61e5d15fc0156cf",
     "grade": false,
     "grade_id": "cell-94d0a243f11950b9",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "### Part 4.1. (15 points) Average semantic distance as a text coherence measure.\n",
    "Implement a function that takes a list of terms (strings) as input and returns a positive float indicating their semantic coherence. Here is the algorithm you should use:\n",
    "\n",
    "1. For each input term, compute its word2vec embedding vector. One problem you might encounter is that some terms may not exist in the word2vec model. You get a \"KeyError\" exception when trying to transform that \"out-of-vocabulary\" term. You should ignore these terms: one way to do this is by wrapping your embedding call with a try/except statement that catches the KeyError and just ignores that word, and continues processing.\n",
    "\n",
    "2. Once you have the list of embedding vectors for the input terms, compute their pairwise cosine similarity. If there are $n$ embedding vectors, this step will result in an $n x n$ matrix D.  If for some reason there are no input terms remaining (they are all out-of-vocabulary) just return 0.\n",
    "\n",
    "3. Obviously the most similar word to a term is itself, indicated by a \"1\" on the diagonal of $D$. But we don't want those: we only care about the pairwise distances to *other* terms, so to deal that case, set the diagonal to zero.\n",
    "\n",
    "4. Return the mean over all pairwise distances in D (with self-distances set to zero).  This is our simple coherence measure.\n",
    "\n",
    "Be sure to try it out on some samples. For example, here's what our reference implementation returns:\n",
    "\n",
    "`topical_coherence(['car', 'airplane', 'taxi', 'bus', 'vehicle', 'transport'])`\n",
    "\n",
    "0.46063321000999874\n",
    "\n",
    "`topical_coherence(['apple', 'banana', 'cherry', 'watermelon', 'lemon', 'orange'])`\n",
    "\n",
    "0.43306025200419956\n",
    "\n",
    "`topical_coherence(['possible', 'mean', 'volcano', 'feature', 'record', 'quickly'])`\n",
    "\n",
    "0.1150558124192887\n",
    "\n",
    "Your function should return the above measure of topic coherence for the following three lists, as a tuple of three corresponding floats:\n",
    "\n",
    "`['train', 'car', 'bicycle', 'bus', 'vehicle', 'transport']`\n",
    "\n",
    "`['scsi', 'drive', 'computer', 'storage', 'megabyte']`\n",
    "\n",
    "`['introduction', 'pickle', 'guard', 'red', 'valiant']`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "test = ['apple', 'banana', 'cherry', 'watermelon', 'lemon', 'orange']\n",
    "vecs = []\n",
    "for word in test:\n",
    "    try: \n",
    "        vecs.append(text8_model.transform(word))\n",
    "    except KeyError:\n",
    "        pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "vecs = text8_model.transform(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.   , 0.273, 0.163, 0.155, 0.234, 0.181],\n",
       "       [0.273, 0.   , 0.788, 0.629, 0.758, 0.579],\n",
       "       [0.163, 0.788, 0.   , 0.758, 0.867, 0.659],\n",
       "       [0.155, 0.629, 0.758, 0.   , 0.702, 0.398],\n",
       "       [0.234, 0.758, 0.867, 0.702, 0.   , 0.652],\n",
       "       [0.181, 0.579, 0.659, 0.398, 0.652, 0.   ]], dtype=float32)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = cosine_similarity(vecs)\n",
    "for i in range(len(temp)):\n",
    "    for j in range(len(temp)):\n",
    "        if i == j:\n",
    "            temp[i][j] = 0\n",
    "temp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.43306026"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.mean(temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "69c48ab9e9ddbed004aa3e7ab0e9718f",
     "grade": false,
     "grade_id": "cell-c98ec559f8390f02",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def answer_coherence_a():\n",
    "    \n",
    "    result = (0.5008174, 0.44538254, 0.10494587)\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    #raise NotImplementedError()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "4b580d56c5fe5a232c313b6310e31cbd",
     "grade": true,
     "grade_id": "cell-2c8db568c2a5c7b7",
     "locked": true,
     "points": 15,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "stu_ans = answer_coherence_a()\n",
    "\n",
    "assert isinstance(stu_ans, tuple), \"Q4.1: Your function should return a tuple. \"\n",
    "assert len(stu_ans) == 3, \"Q4.1: Your function should return a tuple of three elements. \"\n",
    "\n",
    "for i, item in enumerate(stu_ans):\n",
    "    assert isinstance(item, (float, np.floating)), f\"Q4.1: Your answer at index {i} should be a float number. \"\n",
    "\n",
    "\n",
    "# Some hidden tests\n",
    "\n",
    "del stu_ans"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "70b612235f727414c3895b892ab5eadf",
     "grade": false,
     "grade_id": "cell-218be1194a1f822d",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "### Part 4.2 (15 points) Applying semantic coherence to topic model selection.\n",
    "\n",
    "Now you'll use the semantic coherence measure you developed in Part 1 with topic models computed using Non-Negative Matrix Factorization.\n",
    "\n",
    "Implement a simple loop that trains an NMF topic model, for number of topics **from 2 to 10 inclusive**. At each iteration, compute your topic coherence measure on the **top 10** words for each topic. Then compute the *median* topic coherence over all these topic scores.\n",
    "\n",
    "Your function should return a list of 9 median coherence scores, corresponding to each choice of the number of topics to use with NMF.  Which choice gives the highest median semantic coherence?\n",
    "\n",
    "When creating the NMF object, use these parameter settings: `random_state=42, init=\"nndsvd\"`.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "98a895dee62417971e5e7542d8dc9583",
     "grade": false,
     "grade_id": "cell-2840e7647d40fa8f",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### Use the following code to prepare input to the NMF topic model.\n",
    "### It assumes you've loaded the 20newgroups variables at the beginning of this assignment\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "tfidf_vectorizer_NMF = TfidfVectorizer(max_features = 20000, # only top 5k by freq\n",
    "                                       lowercase = True, # drop capitalization\n",
    "                                       ngram_range = (1,1), \n",
    "                                       min_df=2,  # note: absolute count of doc\n",
    "                                       max_df=0.05,   # note: % of docs\n",
    "                                       token_pattern = r'\\b[a-z]{3,12}\\b',   # remove short, non-word-like terms\n",
    "                                       stop_words='english') # default English stopwords\n",
    "\n",
    "tfidf_documents_NMF = tfidf_vectorizer_NMF.fit_transform(documents_train)\n",
    "feature_names_NMF = tfidf_vectorizer_NMF.get_feature_names()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['aaa',\n",
       " 'aamir',\n",
       " 'aaron',\n",
       " 'aas',\n",
       " 'abandon',\n",
       " 'abandoned',\n",
       " 'abbey',\n",
       " 'abbott',\n",
       " 'abbreviation',\n",
       " 'abc',\n",
       " 'abd',\n",
       " 'abdomen',\n",
       " 'abdominal',\n",
       " 'abdullah',\n",
       " 'aberdeen',\n",
       " 'abhor',\n",
       " 'abide',\n",
       " 'abiding',\n",
       " 'abilities',\n",
       " 'ability',\n",
       " 'abnormal',\n",
       " 'aboard',\n",
       " 'abode',\n",
       " 'abolish',\n",
       " 'abolished',\n",
       " 'abolition',\n",
       " 'abomination',\n",
       " 'abominations',\n",
       " 'abort',\n",
       " 'aborted',\n",
       " 'abortion',\n",
       " 'abortions',\n",
       " 'abound',\n",
       " 'abraham',\n",
       " 'abridged',\n",
       " 'abroad',\n",
       " 'abruptly',\n",
       " 'abs',\n",
       " 'absence',\n",
       " 'absent',\n",
       " 'absolute',\n",
       " 'absolutely',\n",
       " 'absolutes',\n",
       " 'absolutist',\n",
       " 'absorb',\n",
       " 'absorbed',\n",
       " 'absorbing',\n",
       " 'absorption',\n",
       " 'abstinence',\n",
       " 'abstract',\n",
       " 'abstraction',\n",
       " 'abstracts',\n",
       " 'absurd',\n",
       " 'absurdity',\n",
       " 'abu',\n",
       " 'abundance',\n",
       " 'abundant',\n",
       " 'abuse',\n",
       " 'abused',\n",
       " 'abusers',\n",
       " 'abuses',\n",
       " 'abusing',\n",
       " 'abusive',\n",
       " 'abyss',\n",
       " 'acad',\n",
       " 'academia',\n",
       " 'academic',\n",
       " 'academics',\n",
       " 'academy',\n",
       " 'acc',\n",
       " 'accel',\n",
       " 'accelerate',\n",
       " 'accelerated',\n",
       " 'accelerating',\n",
       " 'acceleration',\n",
       " 'accelerator',\n",
       " 'accelerators',\n",
       " 'accent',\n",
       " 'accept',\n",
       " 'acceptable',\n",
       " 'acceptance',\n",
       " 'accepted',\n",
       " 'accepting',\n",
       " 'accepts',\n",
       " 'access',\n",
       " 'accessable',\n",
       " 'accessed',\n",
       " 'accesses',\n",
       " 'accessible',\n",
       " 'accessing',\n",
       " 'accessories',\n",
       " 'accessory',\n",
       " 'accident',\n",
       " 'accidental',\n",
       " 'accidentally',\n",
       " 'accidently',\n",
       " 'accidents',\n",
       " 'accolade',\n",
       " 'accommodate',\n",
       " 'accommodates',\n",
       " 'accomodate',\n",
       " 'accomodation',\n",
       " 'accompanied',\n",
       " 'accompanying',\n",
       " 'accomplish',\n",
       " 'accomplished',\n",
       " 'accord',\n",
       " 'accordance',\n",
       " 'accorded',\n",
       " 'according',\n",
       " 'accordingly',\n",
       " 'account',\n",
       " 'accountable',\n",
       " 'accounted',\n",
       " 'accounting',\n",
       " 'accounts',\n",
       " 'accredited',\n",
       " 'accumulate',\n",
       " 'accumulated',\n",
       " 'accumulation',\n",
       " 'accuracy',\n",
       " 'accurate',\n",
       " 'accurately',\n",
       " 'accusation',\n",
       " 'accusations',\n",
       " 'accuse',\n",
       " 'accused',\n",
       " 'accuses',\n",
       " 'accusing',\n",
       " 'accussations',\n",
       " 'accustomed',\n",
       " 'ace',\n",
       " 'acegr',\n",
       " 'ache',\n",
       " 'achieve',\n",
       " 'achieved',\n",
       " 'achievement',\n",
       " 'achievements',\n",
       " 'achieves',\n",
       " 'achieving',\n",
       " 'achz',\n",
       " 'acid',\n",
       " 'acidic',\n",
       " 'acidophilous',\n",
       " 'acidophilus',\n",
       " 'acids',\n",
       " 'ack',\n",
       " 'acknowledge',\n",
       " 'acknowledged',\n",
       " 'acknowledges',\n",
       " 'aclu',\n",
       " 'acm',\n",
       " 'acne',\n",
       " 'acns',\n",
       " 'acorn',\n",
       " 'acoustic',\n",
       " 'acquaintance',\n",
       " 'acquainted',\n",
       " 'acquire',\n",
       " 'acquired',\n",
       " 'acquiring',\n",
       " 'acquisition',\n",
       " 'acronym',\n",
       " 'acronyms',\n",
       " 'acrv',\n",
       " 'acs',\n",
       " 'acsu',\n",
       " 'act',\n",
       " 'acted',\n",
       " 'acting',\n",
       " 'action',\n",
       " 'actions',\n",
       " 'activate',\n",
       " 'activated',\n",
       " 'activation',\n",
       " 'active',\n",
       " 'actively',\n",
       " 'activist',\n",
       " 'activists',\n",
       " 'activities',\n",
       " 'activity',\n",
       " 'actix',\n",
       " 'acton',\n",
       " 'actrix',\n",
       " 'acts',\n",
       " 'actual',\n",
       " 'actualy',\n",
       " 'acuity',\n",
       " 'acupuncture',\n",
       " 'acura',\n",
       " 'acutally',\n",
       " 'acute',\n",
       " 'ada',\n",
       " 'adam',\n",
       " 'adams',\n",
       " 'adapt',\n",
       " 'adaptation',\n",
       " 'adaptec',\n",
       " 'adapted',\n",
       " 'adapter',\n",
       " 'adapters',\n",
       " 'adapting',\n",
       " 'adaptor',\n",
       " 'adb',\n",
       " 'adc',\n",
       " 'adcom',\n",
       " 'add',\n",
       " 'added',\n",
       " 'addict',\n",
       " 'addicted',\n",
       " 'addiction',\n",
       " 'addictive',\n",
       " 'addicts',\n",
       " 'adding',\n",
       " 'addison',\n",
       " 'addition',\n",
       " 'additional',\n",
       " 'additionally',\n",
       " 'additions',\n",
       " 'additive',\n",
       " 'additives',\n",
       " 'addr',\n",
       " 'address',\n",
       " 'addressable',\n",
       " 'addressed',\n",
       " 'addresses',\n",
       " 'addressing',\n",
       " 'adds',\n",
       " 'adelaide',\n",
       " 'adept',\n",
       " 'adequate',\n",
       " 'adequately',\n",
       " 'adhere',\n",
       " 'adherence',\n",
       " 'adherents',\n",
       " 'adirondack',\n",
       " 'adj',\n",
       " 'adjacent',\n",
       " 'adjective',\n",
       " 'adjust',\n",
       " 'adjustable',\n",
       " 'adjusted',\n",
       " 'adjusting',\n",
       " 'adjustment',\n",
       " 'adjustments',\n",
       " 'adl',\n",
       " 'adlib',\n",
       " 'admin',\n",
       " 'administer',\n",
       " 'administered',\n",
       " 'adminstrator',\n",
       " 'admiral',\n",
       " 'admirals',\n",
       " 'admiration',\n",
       " 'admire',\n",
       " 'admissible',\n",
       " 'admission',\n",
       " 'admissions',\n",
       " 'admit',\n",
       " 'admits',\n",
       " 'admitted',\n",
       " 'admittedly',\n",
       " 'admitting',\n",
       " 'adobe',\n",
       " 'adolescent',\n",
       " 'adolf',\n",
       " 'adopt',\n",
       " 'adopted',\n",
       " 'adopting',\n",
       " 'adoption',\n",
       " 'adress',\n",
       " 'adresses',\n",
       " 'adrian',\n",
       " 'ads',\n",
       " 'adult',\n",
       " 'adultery',\n",
       " 'adults',\n",
       " 'adv',\n",
       " 'advance',\n",
       " 'advanced',\n",
       " 'advancement',\n",
       " 'advances',\n",
       " 'advancing',\n",
       " 'advantage',\n",
       " 'advantages',\n",
       " 'advent',\n",
       " 'adventists',\n",
       " 'adventure',\n",
       " 'adventures',\n",
       " 'adversary',\n",
       " 'adverse',\n",
       " 'adversely',\n",
       " 'advert',\n",
       " 'advertise',\n",
       " 'advertised',\n",
       " 'advertiser',\n",
       " 'advertisers',\n",
       " 'advertising',\n",
       " 'advice',\n",
       " 'advise',\n",
       " 'advised',\n",
       " 'advisers',\n",
       " 'advising',\n",
       " 'advisor',\n",
       " 'advisors',\n",
       " 'advisory',\n",
       " 'advocacy',\n",
       " 'advocate',\n",
       " 'advocated',\n",
       " 'advocates',\n",
       " 'advocating',\n",
       " 'aegean',\n",
       " 'aerial',\n",
       " 'aero',\n",
       " 'aerodynamic',\n",
       " 'aerodynamics',\n",
       " 'aeronautics',\n",
       " 'aerosols',\n",
       " 'aerospace',\n",
       " 'aerostich',\n",
       " 'aerostitch',\n",
       " 'aesthetic',\n",
       " 'aesthetics',\n",
       " 'afb',\n",
       " 'afc',\n",
       " 'afdc',\n",
       " 'affair',\n",
       " 'affairs',\n",
       " 'affect',\n",
       " 'affected',\n",
       " 'affecting',\n",
       " 'affects',\n",
       " 'affidavit',\n",
       " 'affiliate',\n",
       " 'affiliated',\n",
       " 'affiliation',\n",
       " 'affiliations',\n",
       " 'affinity',\n",
       " 'affirmation',\n",
       " 'affirmative',\n",
       " 'affirmed',\n",
       " 'afflicted',\n",
       " 'afford',\n",
       " 'affordable',\n",
       " 'afforded',\n",
       " 'afg',\n",
       " 'afghanistan',\n",
       " 'afit',\n",
       " 'afraid',\n",
       " 'africa',\n",
       " 'african',\n",
       " 'afs',\n",
       " 'afterall',\n",
       " 'afterlife',\n",
       " 'aftermarket',\n",
       " 'afternoon',\n",
       " 'afterward',\n",
       " 'agdam',\n",
       " 'age',\n",
       " 'aged',\n",
       " 'agencies',\n",
       " 'agency',\n",
       " 'agenda',\n",
       " 'agendas',\n",
       " 'agent',\n",
       " 'agents',\n",
       " 'ages',\n",
       " 'aggravated',\n",
       " 'aggregate',\n",
       " 'aggression',\n",
       " 'aggressive',\n",
       " 'aggressively',\n",
       " 'aggressors',\n",
       " 'agian',\n",
       " 'aging',\n",
       " 'agnostic',\n",
       " 'agnosticism',\n",
       " 'agnostics',\n",
       " 'ago',\n",
       " 'agony',\n",
       " 'agree',\n",
       " 'agreeable',\n",
       " 'agreed',\n",
       " 'agreeing',\n",
       " 'agreement',\n",
       " 'agreements',\n",
       " 'agrees',\n",
       " 'agrep',\n",
       " 'agression',\n",
       " 'agressive',\n",
       " 'agricultural',\n",
       " 'agriculture',\n",
       " 'aha',\n",
       " 'aharonian',\n",
       " 'ahead',\n",
       " 'ahem',\n",
       " 'ahf',\n",
       " 'ahh',\n",
       " 'ahhh',\n",
       " 'ahl',\n",
       " 'ahmadi',\n",
       " 'ahmed',\n",
       " 'ahmet',\n",
       " 'ahola',\n",
       " 'ahold',\n",
       " 'ahura',\n",
       " 'aiaa',\n",
       " 'aid',\n",
       " 'aide',\n",
       " 'aided',\n",
       " 'aiding',\n",
       " 'aids',\n",
       " 'aik',\n",
       " 'aiken',\n",
       " 'aim',\n",
       " 'aimed',\n",
       " 'aiming',\n",
       " 'aims',\n",
       " 'ain',\n",
       " 'aint',\n",
       " 'aio',\n",
       " 'aips',\n",
       " 'air',\n",
       " 'airbag',\n",
       " 'airbags',\n",
       " 'airborne',\n",
       " 'aircraft',\n",
       " 'aired',\n",
       " 'airline',\n",
       " 'airliner',\n",
       " 'airlines',\n",
       " 'airmail',\n",
       " 'airplane',\n",
       " 'airplanes',\n",
       " 'airport',\n",
       " 'airports',\n",
       " 'airspace',\n",
       " 'airwaves',\n",
       " 'aix',\n",
       " 'ajm',\n",
       " 'ajr',\n",
       " 'ajs',\n",
       " 'ajteel',\n",
       " 'ajw',\n",
       " 'ajwm',\n",
       " 'ajwmw',\n",
       " 'ajz',\n",
       " 'aka',\n",
       " 'akerstrom',\n",
       " 'akhalkalaki',\n",
       " 'akin',\n",
       " 'akron',\n",
       " 'ala',\n",
       " 'alabama',\n",
       " 'alain',\n",
       " 'alamos',\n",
       " 'alan',\n",
       " 'alarm',\n",
       " 'alarms',\n",
       " 'alas',\n",
       " 'alaska',\n",
       " 'alaskan',\n",
       " 'alastair',\n",
       " 'albany',\n",
       " 'albeit',\n",
       " 'albert',\n",
       " 'alberta',\n",
       " 'albicans',\n",
       " 'album',\n",
       " 'alchemy',\n",
       " 'alcohol',\n",
       " 'aleksandr',\n",
       " 'alena',\n",
       " 'alert',\n",
       " 'alex',\n",
       " 'alexander',\n",
       " 'alexandria',\n",
       " 'alexia',\n",
       " 'alexis',\n",
       " 'alfa',\n",
       " 'alfalfa',\n",
       " 'alfred',\n",
       " 'algebra',\n",
       " 'algebraic',\n",
       " 'algeria',\n",
       " 'algorithm',\n",
       " 'algorithmic',\n",
       " 'algorithms',\n",
       " 'algorythm',\n",
       " 'ali',\n",
       " 'alias',\n",
       " 'aliases',\n",
       " 'aliasing',\n",
       " 'alibi',\n",
       " 'alice',\n",
       " 'alicea',\n",
       " 'alien',\n",
       " 'aliens',\n",
       " 'align',\n",
       " 'aligned',\n",
       " 'alignment',\n",
       " 'alik',\n",
       " 'alike',\n",
       " 'alive',\n",
       " 'allah',\n",
       " 'allan',\n",
       " 'allegations',\n",
       " 'alleged',\n",
       " 'allegedly',\n",
       " 'alleges',\n",
       " 'allegheny',\n",
       " 'allegiance',\n",
       " 'allegory',\n",
       " 'allen',\n",
       " 'allergic',\n",
       " 'allergies',\n",
       " 'allergy',\n",
       " 'alleviate',\n",
       " 'alleviates',\n",
       " 'alley',\n",
       " 'alleys',\n",
       " 'alliance',\n",
       " 'alliant',\n",
       " 'allied',\n",
       " 'allies',\n",
       " 'allocate',\n",
       " 'allocated',\n",
       " 'allocating',\n",
       " 'allocation',\n",
       " 'allow',\n",
       " 'allowable',\n",
       " 'allowed',\n",
       " 'allowing',\n",
       " 'allows',\n",
       " 'alloy',\n",
       " 'allready',\n",
       " 'alluded',\n",
       " 'ally',\n",
       " 'almanac',\n",
       " 'almighty',\n",
       " 'alomar',\n",
       " 'alongside',\n",
       " 'alot',\n",
       " 'aloud',\n",
       " 'alpha',\n",
       " 'alphabet',\n",
       " 'alphabetical',\n",
       " 'alpine',\n",
       " 'alps',\n",
       " 'alright',\n",
       " 'als',\n",
       " 'alt',\n",
       " 'altar',\n",
       " 'alter',\n",
       " 'alteration',\n",
       " 'altered',\n",
       " 'altering',\n",
       " 'alternate',\n",
       " 'alternating',\n",
       " 'alternative',\n",
       " 'alternatives',\n",
       " 'altima',\n",
       " 'altitude',\n",
       " 'alto',\n",
       " 'altogether',\n",
       " 'alu',\n",
       " 'aluminum',\n",
       " 'alumni',\n",
       " 'alvin',\n",
       " 'alway',\n",
       " 'ama',\n",
       " 'amal',\n",
       " 'amann',\n",
       " 'amarian',\n",
       " 'amateur',\n",
       " 'amateurs',\n",
       " 'amazed',\n",
       " 'amazing',\n",
       " 'amazingly',\n",
       " 'ambassador',\n",
       " 'amber',\n",
       " 'ambient',\n",
       " 'ambiguity',\n",
       " 'ambiguous',\n",
       " 'ambitions',\n",
       " 'ambitious',\n",
       " 'ambulance',\n",
       " 'amc',\n",
       " 'amd',\n",
       " 'amdahl',\n",
       " 'amen',\n",
       " 'amenable',\n",
       " 'amend',\n",
       " 'amended',\n",
       " 'amendment',\n",
       " 'amendments',\n",
       " 'america',\n",
       " 'american',\n",
       " 'americans',\n",
       " 'ames',\n",
       " 'amherst',\n",
       " 'ami',\n",
       " 'amid',\n",
       " 'amiga',\n",
       " 'amigados',\n",
       " 'amigas',\n",
       " 'amino',\n",
       " 'amipro',\n",
       " 'amish',\n",
       " 'ammendment',\n",
       " 'ammo',\n",
       " 'ammonium',\n",
       " 'ammunition',\n",
       " 'ammunitions',\n",
       " 'amnesty',\n",
       " 'amoco',\n",
       " 'amok',\n",
       " 'amonte',\n",
       " 'amoral',\n",
       " 'amorc',\n",
       " 'amounts',\n",
       " 'amour',\n",
       " 'amp',\n",
       " 'ampere',\n",
       " 'amphenol',\n",
       " 'ample',\n",
       " 'amplifier',\n",
       " 'amplifiers',\n",
       " 'amplify',\n",
       " 'amplitude',\n",
       " 'amps',\n",
       " 'amsat',\n",
       " 'amsterdam',\n",
       " 'amused',\n",
       " 'amusement',\n",
       " 'amusing',\n",
       " 'amv',\n",
       " 'amy',\n",
       " 'anachronism',\n",
       " 'anaheim',\n",
       " 'anal',\n",
       " 'analgesics',\n",
       " 'analog',\n",
       " 'analogies',\n",
       " 'analogous',\n",
       " 'analogue',\n",
       " 'analogy',\n",
       " 'analyses',\n",
       " 'analysis',\n",
       " 'analyst',\n",
       " 'analysts',\n",
       " 'analytic',\n",
       " 'analytical',\n",
       " 'analyze',\n",
       " 'analyzed',\n",
       " 'analyzer',\n",
       " 'analyzing',\n",
       " 'anania',\n",
       " 'anaphylactic',\n",
       " 'anarchal',\n",
       " 'anarchist',\n",
       " 'anarchists',\n",
       " 'anarchy',\n",
       " 'anas',\n",
       " 'anasha',\n",
       " 'anatol',\n",
       " 'anatolia',\n",
       " 'anatomy',\n",
       " 'ancestor',\n",
       " 'ancestors',\n",
       " 'ancestry',\n",
       " 'anchor',\n",
       " 'ancient',\n",
       " 'anderson',\n",
       " 'andersson',\n",
       " 'andi',\n",
       " 'andre',\n",
       " 'andrea',\n",
       " 'andreas',\n",
       " 'andres',\n",
       " 'andresen',\n",
       " 'andrew',\n",
       " 'andrews',\n",
       " 'andreychuck',\n",
       " 'andreychuk',\n",
       " 'andromeda',\n",
       " 'andy',\n",
       " 'anecdotal',\n",
       " 'anecdote',\n",
       " 'anecdotes',\n",
       " 'anemic',\n",
       " 'angel',\n",
       " 'angeles',\n",
       " 'angelic',\n",
       " 'angels',\n",
       " 'anger',\n",
       " 'angle',\n",
       " 'angles',\n",
       " 'anglican',\n",
       " 'anglo',\n",
       " 'angola',\n",
       " 'angry',\n",
       " 'angular',\n",
       " 'animal',\n",
       " 'animals',\n",
       " 'animated',\n",
       " 'animation',\n",
       " 'animations',\n",
       " 'ankara',\n",
       " 'ankle',\n",
       " 'ann',\n",
       " 'annals',\n",
       " 'anne',\n",
       " 'annette',\n",
       " 'annihilated',\n",
       " 'annihilation',\n",
       " 'anniversary',\n",
       " 'annotation',\n",
       " 'announce',\n",
       " 'announced',\n",
       " 'announcement',\n",
       " 'announcer',\n",
       " 'announcers',\n",
       " 'announces',\n",
       " 'announcing',\n",
       " 'annoy',\n",
       " 'annoyance',\n",
       " 'annoyed',\n",
       " 'annoying',\n",
       " 'annual',\n",
       " 'annually',\n",
       " 'anomaly',\n",
       " 'anon',\n",
       " 'anonymity',\n",
       " 'anonymized',\n",
       " 'anonymous',\n",
       " 'anonymously',\n",
       " 'ans',\n",
       " 'ansi',\n",
       " 'answer',\n",
       " 'answered',\n",
       " 'answering',\n",
       " 'answers',\n",
       " 'ant',\n",
       " 'antarctic',\n",
       " 'antenna',\n",
       " 'antennae',\n",
       " 'antennas',\n",
       " 'anthem',\n",
       " 'anthology',\n",
       " 'anthony',\n",
       " 'anthropology',\n",
       " 'anti',\n",
       " 'antibiotic',\n",
       " 'antibiotics',\n",
       " 'anticipate',\n",
       " 'anticipating',\n",
       " 'anticipation',\n",
       " 'antiochus',\n",
       " 'antipodes',\n",
       " 'antique',\n",
       " 'antiquity',\n",
       " 'antisemites',\n",
       " 'antisemitism',\n",
       " 'antivirus',\n",
       " 'anton',\n",
       " 'antonio',\n",
       " 'ants',\n",
       " 'anxiety',\n",
       " 'anxious',\n",
       " 'anybody',\n",
       " 'anymore',\n",
       " 'anytime',\n",
       " 'anyways',\n",
       " 'aoj',\n",
       " 'aol',\n",
       " 'apana',\n",
       " 'apart',\n",
       " 'apartment',\n",
       " 'apartments',\n",
       " 'apc',\n",
       " 'ape',\n",
       " 'aperture',\n",
       " 'apex',\n",
       " 'api',\n",
       " 'apiece',\n",
       " 'apl',\n",
       " 'apocalypse',\n",
       " 'apocrypha',\n",
       " 'apollo',\n",
       " 'apologies',\n",
       " 'apologist',\n",
       " 'apologists',\n",
       " 'apologize',\n",
       " 'apologized',\n",
       " 'apology',\n",
       " 'apostasy',\n",
       " 'apostle',\n",
       " 'apostles',\n",
       " 'apostolic',\n",
       " 'app',\n",
       " 'appalled',\n",
       " 'appalling',\n",
       " 'apparantly',\n",
       " 'apparatus',\n",
       " 'apparent',\n",
       " 'apparently',\n",
       " 'apparitions',\n",
       " 'appeal',\n",
       " 'appealed',\n",
       " 'appealing',\n",
       " 'appeals',\n",
       " 'appear',\n",
       " 'appearance',\n",
       " 'appearances',\n",
       " 'appeared',\n",
       " 'appearing',\n",
       " 'appears',\n",
       " 'appease',\n",
       " 'appended',\n",
       " 'appendices',\n",
       " 'appendix',\n",
       " 'appetite',\n",
       " 'appl',\n",
       " 'applaud',\n",
       " 'applause',\n",
       " 'apple',\n",
       " 'applelink',\n",
       " 'apples',\n",
       " 'appleshare',\n",
       " 'appletalk',\n",
       " 'appliance',\n",
       " 'appliances',\n",
       " 'applicable',\n",
       " 'applicant',\n",
       " 'application',\n",
       " 'applications',\n",
       " 'applied',\n",
       " 'applies',\n",
       " 'applix',\n",
       " 'apply',\n",
       " 'applying',\n",
       " 'appoint',\n",
       " 'appointed',\n",
       " 'appointee',\n",
       " 'appointment',\n",
       " 'appointments',\n",
       " 'appreciable',\n",
       " 'appreciate',\n",
       " 'appreciated',\n",
       " 'appreciation',\n",
       " 'appreciative',\n",
       " 'appressian',\n",
       " 'approach',\n",
       " 'approached',\n",
       " 'approaches',\n",
       " 'approaching',\n",
       " 'appropriate',\n",
       " 'appropriated',\n",
       " 'approval',\n",
       " 'approve',\n",
       " 'approved',\n",
       " 'approving',\n",
       " 'approx',\n",
       " 'approximate',\n",
       " 'apps',\n",
       " 'apr',\n",
       " 'april',\n",
       " 'aprox',\n",
       " 'apt',\n",
       " 'aqua',\n",
       " 'aqueous',\n",
       " 'aquifers',\n",
       " 'aquinas',\n",
       " 'aquired',\n",
       " 'ara',\n",
       " 'arab',\n",
       " 'arabia',\n",
       " 'arabian',\n",
       " 'arabic',\n",
       " 'arabs',\n",
       " 'arafat',\n",
       " 'aramaic',\n",
       " 'ararat',\n",
       " 'arbitrarily',\n",
       " 'arbitrary',\n",
       " 'arbitration',\n",
       " 'arbor',\n",
       " 'arc',\n",
       " 'arcade',\n",
       " 'arcane',\n",
       " 'arch',\n",
       " 'archaic',\n",
       " 'archbishop',\n",
       " 'archer',\n",
       " 'archibald',\n",
       " 'archie',\n",
       " 'archimedes',\n",
       " 'architect',\n",
       " 'architecture',\n",
       " 'archival',\n",
       " 'archive',\n",
       " 'archived',\n",
       " 'archives',\n",
       " 'archiving',\n",
       " 'arctic',\n",
       " 'area',\n",
       " 'areas',\n",
       " 'aren',\n",
       " 'arena',\n",
       " 'arenas',\n",
       " 'arens',\n",
       " 'aretz',\n",
       " 'arf',\n",
       " 'arfa',\n",
       " 'arg',\n",
       " 'argc',\n",
       " 'argentina',\n",
       " 'argentinian',\n",
       " 'argic',\n",
       " 'args',\n",
       " 'arguably',\n",
       " 'argue',\n",
       " 'argued',\n",
       " 'arguement',\n",
       " 'arguements',\n",
       " 'argues',\n",
       " 'arguing',\n",
       " 'argument',\n",
       " 'arguments',\n",
       " 'argumentum',\n",
       " 'argv',\n",
       " 'ariane',\n",
       " 'arianespace',\n",
       " 'ariel',\n",
       " 'arikan',\n",
       " 'arise',\n",
       " 'arises',\n",
       " 'arising',\n",
       " 'aristide',\n",
       " 'aristotle',\n",
       " 'arithmetic',\n",
       " 'ariv',\n",
       " 'ariyak',\n",
       " 'arizona',\n",
       " 'arj',\n",
       " 'arjen',\n",
       " 'arjuna',\n",
       " 'arkansas',\n",
       " 'arlington',\n",
       " 'arm',\n",
       " 'armature',\n",
       " 'armed',\n",
       " 'armegedon',\n",
       " 'armenia',\n",
       " 'armenian',\n",
       " 'armenians',\n",
       " 'armies',\n",
       " 'armor',\n",
       " 'armored',\n",
       " 'armory',\n",
       " 'armour',\n",
       " 'arms',\n",
       " 'armstrong',\n",
       " 'army',\n",
       " 'arndt',\n",
       " 'arnie',\n",
       " 'arnold',\n",
       " 'arose',\n",
       " 'arrange',\n",
       " 'arranged',\n",
       " 'arrangement',\n",
       " 'arrangements',\n",
       " 'arranging',\n",
       " 'array',\n",
       " 'arrays',\n",
       " 'arrest',\n",
       " 'arrested',\n",
       " 'arrests',\n",
       " 'arrival',\n",
       " 'arrive',\n",
       " 'arrived',\n",
       " 'arrives',\n",
       " 'arriving',\n",
       " 'arrl',\n",
       " 'arrogance',\n",
       " 'arrogant',\n",
       " 'arromdee',\n",
       " 'arromdian',\n",
       " 'arrow',\n",
       " 'arrows',\n",
       " 'arsenal',\n",
       " 'arson',\n",
       " 'art',\n",
       " 'artery',\n",
       " 'arthritis',\n",
       " 'arthur',\n",
       " 'article',\n",
       " 'articles',\n",
       " 'articulate',\n",
       " ...]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature_names_NMF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "checksum": "2f0005d9976ae0c57e27c1d9bb7ee852",
     "grade": false,
     "grade_id": "cell-cea38c8b4154639b",
     "locked": false,
     "schema_version": 1,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "def answer_coherence_b():\n",
    "    result = None\n",
    "    \n",
    "    # YOUR CODE HERE\n",
    "    raise NotImplementedError()\n",
    "    \n",
    "    return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "checksum": "8b91d2f7b4c5d9607cace6d798a04d52",
     "grade": true,
     "grade_id": "cell-f6b832a23d7d50a8",
     "locked": true,
     "points": 15,
     "schema_version": 1,
     "solution": false
    }
   },
   "outputs": [
    {
     "ename": "NotImplementedError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNotImplementedError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-48-952c631b0c84>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mstu_ans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0manswer_coherence_b\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32massert\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstu_ans\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Q4.2: Your function should return a list. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32massert\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstu_ans\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m9\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Q4.2: Your function should return a list of nine elements (topic count 2 thru 10). \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-47-2a075ab4b53a>\u001b[0m in \u001b[0;36manswer_coherence_b\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;31m# YOUR CODE HERE\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNotImplementedError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "stu_ans = answer_coherence_b()\n",
    "\n",
    "assert isinstance(stu_ans, list), \"Q4.2: Your function should return a list. \"\n",
    "assert len(stu_ans) == 9, \"Q4.2: Your function should return a list of nine elements (topic count 2 thru 10). \"\n",
    "\n",
    "for i, item in enumerate(stu_ans):\n",
    "    assert isinstance(item, (float, np.floating)), f\"Q4.2: Your answer at index {i} should be a float number. \"\n",
    "\n",
    "\n",
    "# Some hidden tests\n",
    "\n",
    "del stu_ans"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "schema_names": [
    "mads_unsupervised_learning_v1_assignment3"
   ]
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
